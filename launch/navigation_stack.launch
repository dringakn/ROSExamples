<launch>

  <!-- 
        Author: Dr. -Ing. Ahmad Kamal Nasir
        Email: dringakn@gmail.com
        Desciption: 
          Global Planners: 
            GlobalPlanner, NavfnROS, CarrotParrot
          Local Planners: 
            TrajectoryPlannerROS, DWAPlannerROS, EBandPlannerROS, TebLocalPlannerROS, MpcLocalPlannerROS  
        Note:
            Install the planner if not already installed, e.g.
            sudo apt install ros-melodic-carrot-planner
            sudo apt install ros-melodic-teb-local-planner

            -In order to subsitute arguments inside rosparam tag set tag subst_value="true".
            -In order to load the updated rqt_configure parameters, press the reset button in RViz.
            -<<<Important>>> Global planner related parameters are not shown in the rqt_reconfigure. 
            -<<<Important>>> The default_tolerance parameter is not implemented for GlobalPanner, 
             however, it is implemented for NavfnROS.
            -<<<Important>>> In order to consider the robot footprint into the path planning, it can 
             be incorporated by the use of inflated costmap layer.
            -GlobalPlanner "use_dijkstra" can be visulized by adding potential costmap in RViz.
            -NavfnROS "potential" can be visulized by adding pointcloud in RViz.
            -allow_unknown controls weather the plan traverse through unknown space.
            -Orientation filter can be thought as a post-processing step to set the orientation of
             intermediate waypoints orientation (None, Forward, Interpolate, Left, Right, Back)

            -The dwa_local_planner supports velocity constraints specified in x,y, and theta while 
             the base_local_planner only supports constraints specified in x and theta. 
            -There is some support for y velocities, but users are limited to a pre-specified list of valid y velocity commands. 
            -This makes the dwa_local_planner a better choice for robots that are holonomic or pseudo-holonomic 
             because it allows for better sampling of the velocity space.
            -The dwa_local_planner is essentially a re-write of the base_local_planner's DWA (Dynamic Window Approach) option.
            -Robots with low acceleration limits may wish to use Trajectory Rollout over DWA. 
             This option is only available through the base_local_planner package.
            -
    -->

  <arg name="output" default="screen"/>
  <arg name="footprint" default="[[0.25, -0.15], [0.25, 0.15], [-0.15, 0.15], [-0.15, -0.15]]"/>
  <arg name="robot_odom_frame" default="odom"/>
  <arg name="robot_frame" default="base_link"/>
  <arg name="map_topic" default="/projected_map"/>
  <arg name="map_frame" default="odom"/>
  <arg name="navigation_global_map_resolution" default="0.125"/>
  <arg name="navigation_global_map_width" default="50"/>
  <arg name="navigation_global_map_length" default="50"/>
  <arg name="navigation_local_map_resolution" default="0.125"/>
  <arg name="navigation_local_map_width" default="20"/>
  <arg name="navigation_local_map_length" default="20"/>
  <!-- TODO: Parametrize the stack -->

  <!-- <include file="$(dirname)/example_fake_tf.launch" /> -->

  <!--- Run navigation stack with local and global cost map parameters -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="$(arg output)">

    <!-- *********************************************************************** -->
    <!-- Uncomment one of the global planner and modify the settings accordingly -->
    <!-- *********************************************************************** -->

    <!-- Global Planner-1 -->
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <remap from="move_base/NavfnROS/plan" to="global_planner/global_plan"/>


    <!-- Global Planner-2 -->
    <!-- <param name="base_global_planner" value="global_planner/GlobalPlanner"/> -->
    <!-- <remap from="move_base/GlobalPlanner/plan" to="global_planner/global_plan"/> -->
>

    <!-- Global Planner-3 -->
    <!-- <param name="base_global_planner" value="carrot_planner/CarrotPlanner"/> -->
    <!-- <remap from="move_base/CarrotPlanner/plan" to="global_planner/global_plan"/> -->


    <!-- *********************************************************************** -->
    <!-- Uncomment one of the Local planner and modify the settings accordingly -->
    <!-- *********************************************************************** -->
    <!-- Local Planner-1 -->
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <remap from="move_base/TrajectoryPlannerROS/global_plan" to="local_planner/global_plan"/>
    <remap from="move_base/TrajectoryPlannerROS/local_plan" to="local_planner/local_plan"/>

    <!-- Local Planner-2 -->
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
    <remap from="move_base/DWAPlannerROS/global_plan" to="local_planner/global_plan"/>
    <remap from="move_base/DWAPlannerROS/local_plan" to="local_planner/local_plan"/> -->

    <!-- Local Planner-3 (Good) -->
    <!-- <param name="base_local_planner" value="eband_local_planner/EBandPlannerROS"/>
    <remap from="move_base/EBandPlannerROS/global_plan" to="local_planner/global_plan"/>
    <remap from="move_base/EBandPlannerROS/local_plan" to="local_planner/local_plan"/> -->

    <!-- Local Planner-4 -->
    <!-- <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS"/>
    <remap from="move_base/TebLocalPlannerROS/global_plan" to="local_planner/global_plan"/>
    <remap from="move_base/TebLocalPlannerROS/local_plan" to="local_planner/local_plan"/> -->

    <!-- Local Planner-5 -->
    <!-- <param name="base_local_planner" value="mpc_local_planner/MpcLocalPlannerROS"/>
    <remap from="move_base/MpcLocalPlannerROS/global_plan" to="local_planner/global_plan"/>
    <remap from="move_base/MpcLocalPlannerROS/local_plan" to="local_planner/local_plan"/> -->

    <!-- ****************************************************** -->
    <!-- *************** move_base parameters ***************** -->
    <!-- ****************************************************** -->
    <rosparam >
      aggressive_reset: {reset_distance: 1.84}    
      clearing_rotation_allowed: false
      conservative_reset: {reset_distance: 3.0}
      conservative_reset_dist: 3.0
      controller_frequency: 10 # freq
      controller_patience: 5.0
      max_planning_retries: 1
      oscillation_distance: 0.5
      oscillation_timeout: 0.0
      planner_frequency: 1 # Path planning update frequency
      planner_patience: 5.0
      recovery_behavior_enabled: true
      restore_defaults: false
      shutdown_costmaps: false
    </rosparam>

    <!-- ****************************************************** -->
    <!-- ****************** Global costmap ******************** -->
    <!-- ****************************************************** -->
    <rosparam ns="global_costmap">      
      global_frame: map
      robot_base_frame: base_link
      update_frequency: 2.0
      publish_frequency: 0.2 # Don't send for visulization
      rolling_window: true
      origin_x: 0.0
      origin_y: 0.0
      height: 50
      width: 50
      resolution: 0.125
      always_send_full_costmap: false

      footprint: [[0.25, -0.15], [0.25, 0.15], [-0.15, 0.15], [-0.15, -0.15]]
      footprint_padding: 0.125
      transform_tolerance: 0.5
      
      observation_sources: laser      
      laser: {sensor_frame: hukyo_laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
      plugins:
      - {name: static_layer, type: "costmap_2d::StaticLayer"}
      #- {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
      #- {name: obstacle_layer, type: "costmap_2d::VoxelLayer"}
      - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
      static_layer: {enabled: true, map_topic: /map, unknown_cost_value: -1, lethal_cost_threshold: 100, first_map_only: false, subscribe_to_updates: false, track_unknown_space: false, use_maximum: false, trinary_costmap: true}
      inflation_layer: {cost_scaling_factor: 10.0, enabled: true, inflate_unknown: false, inflation_radius: 0.5}
      obstacle_layer: {observation_sources: laser, obstacle_range: 5, raytrace_range: 5, combination_method: 0, enabled: true, footprint_clearing_enabled: true, max_obstacle_height: 2.0}
    </rosparam>

    <!-- ****************************************************** -->
    <!-- ****************** Local costmap ********************* -->
    <!-- ****************************************************** -->
    <rosparam ns="local_costmap">
      global_frame: odom
      robot_base_frame: base_link
      update_frequency: 5.0
      publish_frequency: 0.2 # Don't send for visulization
      rolling_window: true
      origin_x: 0.0
      origin_y: 0.0
      width: 5.0
      height: 5.0
      resolution: 0.125
      always_send_full_costmap: false

      footprint: [[0.25, -0.15], [0.25, 0.15], [-0.15, 0.15], [-0.15, -0.15]]
      footprint_padding: 0.0
      transform_tolerance: 0.5
      observation_sources: laser
      laser: {sensor_frame: hukyo_laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
      static_layer: {enabled: true, map_topic: /map, unknown_cost_value: -1, lethal_cost_threshold: 100, first_map_only: false, subscribe_to_updates: false, track_unknown_space: false, use_maximum: false, trinary_costmap: true}
      inflation_layer: {cost_scaling_factor: 10.0, enabled: true, inflate_unknown: false, inflation_radius: 0.5}
      obstacle_layer: {observation_sources: laser, obstacle_range: 4.5, raytrace_range: 5.0, combination_method: 0, enabled: true, footprint_clearing_enabled: true, max_obstacle_height: 2.0}
      plugins:
      - {name: static_layer, type: "costmap_2d::StaticLayer"}
      #- {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
      #- {name: obstacle_layer, type: "costmap_2d::VoxelLayer"}
      - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
    </rosparam>

    <!-- ****************************************************** -->
    <!-- ****************** Global Planners ******************* -->
    <!-- ****************************************************** -->
    <!-- Global Planner-1 Settings -->
    <rosparam ns="NavfnROS">
      allow_unknown: false # Specifies whether or not to allow navfn to create plans that traverse unknown space. NOTE: if you are using a layered costmap_2d costmap with a voxel or obstacle layer, 
                          # you must also set the track_unknown_space param for that layer to be true, or it will convert all your unknown space to free space (which navfn will then happily go right through).
      planner_window_x: 0 # Specifies the x size of an optional window to restrict the planner to. This can be useful for restricting NavFn to work in a small window of a large costmap. 
      planner_window_y: 0 # Specifies the y size of an optional window to restrict the planner to. This can be useful for restricting NavFn to work in a small window of a large costmap. 
      default_tolerance: 0.125 # A tolerance on the goal point for the planner. NavFn will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away. New in navigation 1.3.0
      visualize_potential: true # Specifies whether or not to visualize the potential area computed by navfn via a PointCloud2. New in navigation 1.3.1
    </rosparam>

    <!-- Global Planner-2 Settings -->
    <rosparam ns="GlobalPlanner">
      lethal_cost: 253 #
      neutral_cost: 1 #
      cost_factor: 1 # Factor to multiply each cost from costmap by
      visualize_potential: false # Sgpecifies whether or not to visualize the potential area computed via a PointCloud2.
      publish_potential: false # Publish Potential Costmap
      orientation_mode: 1 # None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6
      orientation_window_size: 1 # What window to use to determine the orientation based on the position derivative specified by the orientation mode
      old_navfn_behavior: false # If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true
      use_grid_path: true # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
      use_quadratic: false # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
      use_dijkstra: false # If true, use dijkstra's algorithm. Otherwise, A*.
      default_tolerance: 0.1 # A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away
      allow_unknown: true # Specifies whether or not to allow the planner to create plans that traverse unknown space. NOTE: if you are using a layered costmap_2d costmap with a voxel or obstacle layer, you must also set the track_unknown_space param for that layer to be true, or it will convert all your unknown space to free space (which planner will then happily go right through).    
    </rosparam>

    <!-- Global Planner-3 Settings -->
    <rosparam ns="CarrotPlanner">
      step_size: 0.125 # The size steps to take backward in meters along the vector between the robot and the user-specified goal point when attempting to find a valid goal for the local planner. 
      min_dist_from_robot: 0.1 #     The minimum distance from the robot in meters at which a goal point will be sent to the local planner. 
    </rosparam>

    <!-- ****************************************************** -->
    <!-- ****************** Local Planners ******************** -->
    <!-- ****************************************************** -->
    <!-- Local Planner-1 Settings -->
    <!-- Published Topics: global_plan, local_plan -->
    <!-- Subscribed Topics: odom -->
    <rosparam ns="TrajectoryPlannerROS">
      # Robot Configuration Parameters TrajectoryPlannerROS
      acc_lim_x: 0.5 # The x acceleration limit of the robot in meters/sec^2 
      acc_lim_y: 0.5 # The y acceleration limit of the robot in meters/sec^2 
      acc_lim_theta: 0.79 # The rotational acceleration limit of the robot in radians/sec^2 
      max_vel_x: 0.5 # The maximum forward velocity allowed for the base in meters/sec 
      min_vel_x: 0.05 # he minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.
      max_vel_theta: 0.79 #
      min_vel_theta: -0.79 #
      max_rotational_vel: 0.79 # The maximum rotational velocity allowed for the base in radians/sec 
      min_in_place_vel_theta: 0.1 # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec 
      escape_vel: -0.1 # Speed used for driving during escapes in meters/sec. 
                       # Note that it must be negative in order for the robot to actually reverse. 
                       # A positive speed will cause the robot to move forward while attempting to escape.
      holonomic_robot: false # false=Differential drive, true=OmniDrive
      y_vels: '-0.3,-0.1,0.1,-0.3' # The strafing velocities that a holonomic robot will consider in meters/sec.
      
      # Goal Tolerance Parameters TrajectoryPlannerROS
      yaw_goal_tolerance: 3.14152 # The tolerance in radians for the controller in yaw/rotation when achieving its goal 
      xy_goal_tolerance: 0.5 # The tolerance in meters for the controller in the x and y distance when achieving a goal 
      latch_xy_goal_tolerance: false # if goal tolerance is latched, if the robot ever reaches the goal xy location 
                                     # it will simply rotate in place, even if it ends up outside the goal 
                                     # tolerance while it is doing so.

      # Forward Simulation Parameters TrajectoryPlannerROS
      sim_time: 2 # The amount of time to forward-simulate trajectories in seconds 
      sim_granularity: 0.01 # The step size, in meters, to take between points on a given trajectory 
      angular_sim_granularity: 0.01745 # The step size, in radians, to take between angular samples on a given trajectory
      vx_samples: 20 # The number of samples to use when exploring the x velocity space 
      vtheta_samples: 40 # The number of samples to use when exploring the theta velocity space 

      # Trajectory Scoring Parameters TrajectoryPlannerROS
      # The cost function used to score each trajectory is in the following form
      # cost = 
      # path_distance_bias * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
      # + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
      # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
      meter_scoring: true # Whether the goal_distance_bias and path_distance_bias parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. 
      goal_distance_bias: 0.8 # The weighting for how much the controller should stay close to the path it was given
      path_distance_bias: 0.6 # The weighting for how much the controller should attempt to reach its local goal, also controls speed 
      occdist_scale: 0.01 # The weighting for how much the controller should attempt to avoid obstacles.
      heading_lookahead: 1.0 # How far to look ahead in meters when scoring different in-place-rotation trajectories.
      heading_scoring: false # Whether to score based on the robot's heading to the path or its distance from the path 
      heading_scoring_timestep: 0.1 # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 
      dwa: false # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.) 

      # Oscillation Prevention Parameters TrajectoryPlannerROS
      oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset.

      # Global Plan Parameters TrajectoryPlannerROS
      prune_plan: false # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.

      # Others TrajectoryPlannerROS
      escape_reset_dist: 0.1
      escape_reset_theta: 1.57
      restore_defaults: false
      simple_attractor: false

    </rosparam>

    <!-- Local Planner-2 Settings -->
    <rosparam ns="DWAPlannerROS">
      # Robot Configuration Parameters DWAPlannerROS
      acc_lim_x: 0.5 # The x acceleration limit of the robot in meters/sec^2 
      acc_lim_y: 0.0 # The y acceleration limit of the robot in meters/sec^2 
      acc_lim_trans: 0.5 # # The acceleration limit of the robot in meters/sec^2 
      acc_lim_theta: 0.79 # The rotational acceleration limit of the robot in radians/sec^2 
      max_vel_trans: 0.5
      min_vel_trans: 0.05
      max_vel_theta: 0.79
      min_vel_theta: 0.1
      max_vel_x: 0.5
      min_vel_x: 0.0
      max_vel_y: 0.0
      min_vel_y: 0.0
      
      # Goal Tolerance Parameters DWAPlannerROS
      yaw_goal_tolerance: 3.14152
      xy_goal_tolerance: 0.5
      latch_xy_goal_tolerance: false

      # Forward Simulation Parameters DWAPlannerROS
      sim_time: 2
      sim_granularity: 0.025 
      angular_sim_granularity: 0.01745
      vth_samples: 40
      vx_samples: 20
      vy_samples: 0

      # Trajectory Scoring Parameters DWAPlannerROS
      # The cost function used to score each trajectory is in the following form: 
      # cost =
      # path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
      # + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
      # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
      path_distance_bias: 1 # The weighting for how much the controller should stay close to the path it was given
      goal_distance_bias: 1 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
      occdist_scale: 0.02 # The weighting for how much the controller should attempt to avoid obstacles       
      forward_point_distance: 0.325 # The distance from the center point of the robot to place an additional scoring point, in meters
      stop_time_buffer: 1.0 # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds.
      scaling_speed: 0.25 # The absolute value of the velocity at which to start scaling the robot's footprint, in m/s 
      max_scaling_factor: 0.2 # The maximum factor to scale the robot's footprint by 
      publish_cost_grid: false

      # Oscillation Prevention Parameters DWAPlannerROS
      oscillation_reset_angle: 0.2
      oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset 

      # Plan Parameters DWAPlannerROS
      prune_plan: true

      # Others DWAPlannerROS
      twirling_scale: 0.0
      use_dwa: true
      theta_stopped_vel: 0.05
      trans_stopped_vel: 0.05
      restore_defaults: false
    </rosparam>

    <!-- Local Planner-3 Settings -->
    <rosparam ns="EBandPlannerROS">
      # Robot Configuration Parameters EBandPlannerROS
      max_acceleration: 0.5 
      max_rotational_acceleration: 1.5
      max_translational_acceleration: 0.5
      max_vel_lin: 0.75 
      max_vel_th: 1.0 
      min_in_place_vel_th: 0.0
      min_vel_lin: 0.1
      min_vel_th: 0.0
      rot_stopped_vel: 0.01
      trans_stopped_vel: 0.01
      in_place_trans_vel: 0.0
      
      Ctrl_Rate: 10.0 
      bubble_velocity_multiplier: 2.0
      costmap_weight: 10.0
      differential_drive: true
      disallow_hysteresis: false
      eband_equilibrium_approx_max_recursion_depth: 4
      eband_equilibrium_relative_overshoot: 0.75
      eband_external_force_gain: 2.0
      eband_internal_force_gain: 1.0
      eband_min_relative_overlap: 0.7
      eband_significant_force_lower_bound: 0.15
      eband_tiny_bubble_distance: 0.01
      eband_tiny_bubble_expansion: 0.01 
      k_damp: 3.5
      k_prop: 4.0
      marker_lifetime: 0.5
      num_iterations_eband_optimization: 3
      rotation_correction_threshold: 0.5
      rotation_threshold_multiplier: 1.0
      virtual_mass: 0.75

      xy_goal_tolerance: 0.5 
      yaw_goal_tolerance: 3.14152
    </rosparam>

    <!-- Local Planner-4 Settings -->
    <rosparam ns="TebLocalPlannerROS">
      acc_lim_theta: 0.5
      acc_lim_x: 0.5
      acc_lim_y: 0.5
      allow_init_with_backwards_motion: false
      cmd_angle_instead_rotvel: false
      costmap_obstacles_behind_robot_dist: 1.5
      dt_hysteresis: 0.1
      dt_ref: 0.3
      dynamic_obstacle_inflation_dist: 0.6
      enable_multithreading: true
      exact_arc_length: false
      feasibility_check_no_poses: 5
      force_reinit_new_goal_angular: 0.78
      force_reinit_new_goal_dist: 1.0
      free_goal_vel: false
      global_plan_overwrite_orientation: true
      global_plan_viapoint_sep: -0.1
      h_signature_prescaler: 1.0
      h_signature_threshold: 0.1,
      include_costmap_obstacles: true
      include_dynamic_obstacles: false
      inflation_dist: 0.6
      is_footprint_dynamic: false
      legacy_obstacle_association: false
      max_global_plan_lookahead_dist: 3.0
      max_number_classes: 5
      max_vel_theta: 0.3
      max_vel_x: 0.4
      max_vel_x_backwards: 0.2
      max_vel_y: 0.0
      min_obstacle_dist: 0.5
      min_turning_radius: 0.0
      no_inner_iterations: 5
      no_outer_iterations: 4
      obstacle_association_cutoff_factor: 5.0
      obstacle_association_force_inclusion_factor: 1.5
      obstacle_cost_exponent: 1.0
      obstacle_heading_threshold: 0.45
      obstacle_poses_affected: 30
      optimization_activate: true
      optimization_verbose: false
      oscillation_recovery: true
      penalty_epsilon: 0.1
      publish_feedback: false
      roadmap_graph_area_length_scale: 1.0
      roadmap_graph_area_width: 5.0
      roadmap_graph_no_samples: 15
      selection_alternative_time_cost: false
      selection_cost_hysteresis: 1.0
      selection_obst_cost_scale: 2.0
      selection_prefer_initial_plan: 0.95
      selection_viapoint_cost_scale: 1.0
      shrink_horizon_backup: true
      switching_blocking_period: 0.0
      teb_autosize: true
      via_points_ordered: false
      viapoints_all_candidates: true
      visualize_hc_graph: false
      visualize_with_time_as_z_axis_scale: 0.0
      weight_acc_lim_theta: 1.0
      weight_acc_lim_x: 1.0
      weight_acc_lim_y: 1.0
      weight_adapt_factor: 2.0
      weight_dynamic_obstacle: 50.0
      weight_dynamic_obstacle_inflation: 0.1
      weight_inflation: 0.1
      weight_kinematics_forward_drive: 1.0
      weight_kinematics_nh: 1000.0
      weight_kinematics_turning_radius: 1.0
      weight_max_vel_theta: 1.0
      weight_max_vel_x: 2.0
      weight_max_vel_y: 2.0
      weight_obstacle: 50.0
      weight_optimaltime: 1.0
      weight_shortest_path: 0.0
      weight_viapoint: 1.0
      wheelbase: 1.0
      xy_goal_tolerance: 0.5
      yaw_goal_tolerance: 3.14152
    </rosparam>

    <!-- Local Planner-5 Settings -->
    <rosparam ns="MpcLocalPlannerROS">
     odom_topic: odom
    
      ## Robot settings
     robot:
       type: "unicycle"
       unicycle:
         max_vel_x: 0.4
         max_vel_x_backwards: 0.2
         max_vel_theta: 0.3
         acc_lim_x: 0.2 # deactive bounds with zero
         dec_lim_x: 0.2 # deactive bounds with zero
         acc_lim_theta: 0.2 # deactivate bounds with zero
   
     ## Footprint model for collision avoidance
     footprint_model:
       type: "point"
       is_footprint_dynamic: False
   
     ## Collision avoidance
     collision_avoidance:
       min_obstacle_dist: 0.2 # Note, this parameter must be chosen w.r.t. the footprint_model
       enable_dynamic_obstacles: False
       force_inclusion_dist: 0.5
       cutoff_dist: 2.5 
       include_costmap_obstacles: True
       costmap_obstacles_behind_robot_dist: 1.5
   
     ## Planning grid 
     grid:
       type: "fd_grid"
       grid_size_ref: 20
       dt_ref: 0.3
       xf_fixed: [True, True, True]
       warm_start: True
       collocation_method: "forward_differences"
       cost_integration_method: "left_sum"
       variable_grid:
         enable: True  
         min_dt: 0.0;
         max_dt: 10.0;
         grid_adaptation:
           enable: True
           dt_hyst_ratio: 0.1
           min_grid_size: 2
           max_grid_size: 50
   
     ## Planning options
     planning:
       objective:
         type: "minimum_time" # minimum_time requires grid/variable_grid/enable=True and grid/xf_fixed set properly
         quadratic_form:
           state_weights: [2.0, 2.0, 2.0]
           control_weights: [1.0, 1.0]
           integral_form: False
         minimum_time_via_points:
           position_weight: 10.5
           orientation_weight: 0.0
           via_points_ordered: False
       terminal_cost:
         type: "none" # can be "none"
         quadratic:
           final_state_weights: [2.0, 2.0, 2.0]
       terminal_constraint:
         type: "none" # can be "none"
         l2_ball:
           weight_matrix: [1.0, 1.0, 1.0]
           radius: 5
   
     ## Controller options
     controller:
       outer_ocp_iterations: 5
       xy_goal_tolerance: 0.5
       yaw_goal_tolerance: 3.14152
       global_plan_overwrite_orientation: true
       global_plan_prune_distance: 1.0
       allow_init_with_backward_motion: True
       max_global_plan_lookahead_dist: 1.5 
       global_plan_viapoint_sep: 5.5
       force_reinit_new_goal_dist: 1.0
       force_reinit_new_goal_angular: 1.57
       force_reinit_num_steps: 0
       prefer_x_feedback: False
       publish_ocp_results: False
       
     ## Solver settings
     solver:
       type: "ipopt"
       ipopt:
         iterations: 100
         max_cpu_time: -1.0
         ipopt_numeric_options:
           tol: 1e-4
         ipopt_string_options:
           linear_solver: "mumps" 
           hessian_approximation: "exact" # exact or limited-memory
       lsq_lm:
         iterations: 10
         weight_init_eq: 2
         weight_init_ineq: 2
         weight_init_bounds: 2
         weight_adapt_factor_eq: 1.5
         weight_adapt_factor_ineq: 1.5
         weight_adapt_factor_bounds: 1.5
         weight_adapt_max_eq: 500
         weight_adapt_max_ineq: 500
         weight_adapt_max_bounds: 500   
    </rosparam>
  </node>

  <node pkg="rqt_reconfigure" type="rqt_reconfigure" name="rqt_reconfigure" />

</launch>
