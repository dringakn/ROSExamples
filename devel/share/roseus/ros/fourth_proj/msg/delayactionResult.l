;; Auto-generated. Do not edit!


(when (boundp 'fourth_proj::delayactionResult)
  (if (not (find-package "FOURTH_PROJ"))
    (make-package "FOURTH_PROJ"))
  (shadow 'delayactionResult (find-package "FOURTH_PROJ")))
(unless (find-package "FOURTH_PROJ::DELAYACTIONRESULT")
  (make-package "FOURTH_PROJ::DELAYACTIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude delayactionResult.msg.html


(defclass fourth_proj::delayactionResult
  :super ros::object
  :slots (_b ))

(defmethod fourth_proj::delayactionResult
  (:init
   (&key
    ((:b __b) 0)
    )
   (send-super :init)
   (setq _b (round __b))
   self)
  (:b
   (&optional __b)
   (if __b (setq _b __b)) _b)
  (:serialization-length
   ()
   (+
    ;; int64 _b
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _b
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _b (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _b) (= (length (_b . bv)) 2)) ;; bignum
              (write-long (ash (elt (_b . bv) 0) 0) s)
              (write-long (ash (elt (_b . bv) 1) -1) s))
             ((and (class _b) (= (length (_b . bv)) 1)) ;; big1
              (write-long (elt (_b . bv) 0) s)
              (write-long (if (>= _b 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _b s)(write-long (if (>= _b 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _b
#+(or :alpha :irix6 :x86_64)
      (setf _b (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _b (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(setf (get fourth_proj::delayactionResult :md5sum-) "b5a3c6284d5ab11e232db053f443f102")
(setf (get fourth_proj::delayactionResult :datatype-) "fourth_proj/delayactionResult")
(setf (get fourth_proj::delayactionResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#Part2: Result defination
int64 b

")



(provide :fourth_proj/delayactionResult "b5a3c6284d5ab11e232db053f443f102")


