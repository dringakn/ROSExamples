TebLocalPlannerROS:
  # Robot Configuration Parameters
  acc_lim_x: 0.3 # (m/s^2)
  acc_lim_y: 0.0 # (m/s^2)
  acc_lim_theta: 0.3 # (rad/s^2)
  max_vel_x: 0.3 # Maximum translational velocity (m/s)
  min_vel_x: 0.3
  max_vel_theta: 0.3 # Maximum angular velocity (rad/s)
  max_vel_x_backwards: 0.3 # Maximum absolute translational velocity of the robot while driving backwards (m/s)
  min_turning_radius: 0.0 # Minimum turning radius of a carlike robot (set to zero for a diff-drive robot)
  # wheelbase: # Only required if the next commented line set to true
  # cmd_angle_instead_rotvel: # default false

  footprint_model:
    type: "polygon"
    # vertices: [[0.25, -0.15], [0.25, 0.15], [-0.25, 0.15], [-0.25, -0.15]]

  # Recovery
  shrink_horizon_backup: true
  oscillation_recovery: true

  # Goal Tolerance Parameters
  xy_goal_tolerance: 0.5 # Euclidean distance to the goal position (m)
  yaw_goal_tolerance: 3.14 # 180deg, Allowed final orientation error (rad)
  free_goal_vel: false # true, Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed

  # Trajectory Configuration Parameters
  teb_autosize: true # Enable automatic resizing of the trajectory (recomended)
  dt_ref: 0.5 # Desired temporal resolution of the trajectory
  dt_hysteresis: 0.05 #
  min_samples: 3 # Minimum number of samples
  global_plan_overwrite_orientation: true # Overwrite orientation of local subgoals provided by the global planner
  max_global_plan_lookahead_dist: 10.0 # Specify the maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization
  force_reinit_new_goal_dist: 0.25 # Reinitialize the trajectory if a previous goal is updated with a separation of more than the specified value in meters (skip hot-starting)
  feasibility_check_no_poses: 10 # 4, Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval
  publish_feedback: true # Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging)
  allow_init_with_backwards_motion: false # default false -> If true, underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors)
  exact_arc_length: true # If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations (-> increased cpu time), otherwise the Euclidean approximation is used.

  # Obstacle Parameters
  min_obstacle_dist: 0.5 # 1.0, Minimum desired separation from obstacles in meters
  inflation_dist: 0.5 # 1.5, Buffer zone arround obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)
  dynamic_obstacle_inflation_dist: 0.5 # 1.5
  include_dynamic_obstacles: true # If true, the motion of obstacles with non-zero velocity is predicted and considered during optimization via constant velocity model
  include_costmap_obstacles: true # Specify if obstacles of the local costmap should be taken into account
  legacy_obstacle_association: false # false -> actual strategy ( for each teb pose, find only "relevant" obstacles) and true -> old  strategy (for each obstacle, find nearest TEB pose)
  obstacle_association_force_inclusion_factor: 1.5 # (TRY TO UNDERSTAND BETTER THIS PARAMETER)
  costmap_obstacles_behind_robot_dist: 1.0 # Limit the occupied local costmap obstacles taken into account for planning behind the robot (m)
  obstacles_poses_affected: 10 # 30, Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance (TRY TO UNDERSTAND BETTER THIS PARAMETER)
  costmap_converter_plugin: "" # Define plugin name in order to convert costmap cells to points/lines/polygons
  costmap_converter_spin_thread: true # If true, the costmap converter invokes its callback queue in diferent thread
  costmap_converter_rate: 2.0 # 1, Rate that defines how often the costmap_converter plugin processes the current costmap

  # Optimization Parameters
  no_inner_iterations: 5 # Number of actual solver iterations called in each outerloop interation
  no_outer_iterations: 4 # Each outerloop iteration automatically resizes the trajectory according to the desired temporal resolution dt_ref and invokes the internal optimizer (that performs no_inner_iterations)
  penalty_epsilon: 0.05 # Add a small safety margin to penalty functons for hard constraints approximations
  weight_max_vel_x: 1.0 # Optimization weight for satisfynig the maximum allowed translational velocity
  weight_max_vel_y: 0.0 # Optimization weight for satisfynig the maximum allowed translational velocity
  weight_max_vel_theta: 1.0 # Optimization weight for satisfynig the maximum allowed angular velocity
  weight_acc_lim_x: 0.0 # Optimization weight for satisfynig the maximum allowed translational acceleration
  weight_acc_lim_y: 0.0 # Optimization weight for satisfynig the maximum allowed translational acceleration
  weight_acc_lim_theta: 0.0 # Optimization weight for satisfynig the maximum allowed angular acceleration
  weight_kinematics_forward_drive: 100.0 # Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities). A small weight (e.g. 1.0) still allows driving backwards
  weight_kinematics_nh: 100.0 # Optimization weight for satisfying the non-holonomic kinematics
  weight_kinematics_turning_radius: 0.0 # Optimization weight for enforcing a minimum turning radius
  weight_optimaltime: 1.0 # Optimization weight for contracting the trajectory w.r.t transition/execution time
  weight_shortest_path: 1.0
  weight_obstacle: 1.0 # Optimization weight for keeping a minimum distance from obstacles
  weight_inflation: 1.0 # Optimization weight for the inflation penalty (should be small)
  weight_dynamic_obstacle: 1.0 # Optimization weight for keeping a minimum distance from obstacles
  weight_viapoint: 0.0 # Optimization weight for minimzing the distance to via-points
  weight_adapt_factor: 1.0 # Some special weights (currently weight_obstacle) are repeatedly scaled by this factor in each outer TEB iteration (weight_new = weight_old*factor)
  optimization_activate: true
  obstacle_cost_exponent: 1 # 1 to disable

  # Parallel Planning in Distinctive Topologies
  enable_homotopy_class_planning: true # Activate parallel planning in distinctive topologies
  enable_multithreading: true # Activate multiple threading in order to plan each trajectory in a different thread
  max_number_classes: 4 # Specify the maximum number of distinctive trajectories taken into account
  selection_cost_hysteresis: 1 # Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor).
  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 6
  h_signature_prescaler: 1.0
  h_signature_threshold: 0.1
  obstacle_keypoint_offset: 0.1
  obstacle_heading_threshold: 1.0
  visualize_hc_graph: true # Visualize the graph that is created for exploring distinctive trajectories (check marker message in rviz)


  # Miscellaneous Parameters
  # odom_topic: odom
  # map_frame: /map
