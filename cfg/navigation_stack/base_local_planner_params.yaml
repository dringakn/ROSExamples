controller_frequency: 5.0 # The rate in Hz at which to run the control loop and send velocity commands to the base.
recovery_behavior_enabled: true # Whether or not to enable the move_base recovery behaviors to attempt to clear out space.

TrajectoryPlannerROS:
  acc_lim_x: 1.0 # [0, 20.0], The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0.0 # [0, 20.0], The y acceleration limit of the robot in meters/sec^2
  acc_lim_theta: 3.14 # [0, 20.0], The rotational acceleration limit of the robot in radians/sec^2
  max_vel_x: 0.50 # [0, 20.0], The maximum forward velocity allowed for the base in meters/sec
  min_vel_x: 0.50 # [0, 20.0], The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.
  max_vel_y: 0.0 # [0, 20.0],
  min_vel_y: 0.0 # [0, 20.0],
  max_vel_theta: 3.14 # [0, 20.0], The absolute value of the maximum rotational velocity for the robot in rad/s
  min_vel_theta: -3.14 # [-20.0, 0], The absolute value of the minimum rotational velocity for the robot in rad/s
  min_in_place_vel_theta: 1.57 # [0, 20],The absolute value of the minimum in-place rotational velocity the controller will explore. The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
  #max_trans_vel: 0.50 # [0, 20.0],
  #min_trans_vel: 0.50 # [0, 20.0],

  # Forward Simulation Parameters
  # these parameters change how the planner simulates trajectories at each update and therefore changes the optimal trajectory that is chosen. These parameters change the way planners simulate the trajectory of each update
  # These should be adjusted based on your computer performance should be based on computer performance tuning
  sim_time: 5.0 # [0, 10], The amount of time to roll trajectories out for in seconds. Setting time of each simulation that it must evaluate. Higher will create longer curves but too low can limit performance (<2)
  sim_granularity: 0.25 #[0, 5] The granularity with which to check for collisions along each trajectory in meters. The step size to take between points on a trajectory, or how frequent should the points on this trajectory step should be examined between the two
  angular_sim_granularity: 0.1745 # [0, pi/2], The distance between simulation points for angular velocity should be small enough that the robot doesn't hit things. The step size, in radians, to take between angular samples on a given trajectory.
  vx_samples: 50 # [1 300], The number of samples to use when exploring the x velocity space. how many samples of x velocity are taken for simulated trajectories
  vy_samples: 1 # [1 300], The number of samples to use when exploring the y velocity space. how many samples of y velocity are taken for simulated trajectories
  vtheta_samples: 100 # [1 300], The number of samples to use when exploring the theta velocity space. how many samples of theta velocity are taken for simulated trajectories
  heading_lookahead: 5 # [0, 5], How far to look ahead in meters when scoring different in-place-rotation trajectories

  holonomic_robot: false # Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued.
  #y_vels: [-0.3, -0.1, 0.1, 0.3] # The following parameters are only used if holonomic_robot is set to true. The strafing velocities that a holonomic robot will consider in meters/sec

  # Goal Tolerance Parameters target point
  xy_goal_tolerance: 5 # The tolerance in meters for the controller in the x & y distance when achieving a goal
  yaw_goal_tolerance: 3.14 # 10 deg, The tolerance in radians for the controller in yaw/rotation when achieving its goal
  latch_xy_goal_tolerance: true # If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so

  # Trajectory scoring parameters
  # The cost function used to score each trajectory is in the following form:
  # cost =
  # pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
  # + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
  # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  dwa: false # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.)
  heading_scoring: true # Set this to true to use the Dynamic Window Approach, false to use acceleration limits
  heading_scoring_timestep: 1.0 # [0, 1], How far to look ahead in time when we score heading based trajectories
  meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
  path_distance_bias: 2 # The weighting for how much the controller should stay close to the path it was given default 0.6 weight close to the path weight.
  goal_distance_bias: 0.8 # The weighting for how much the controller should attempt to reach its local goal, the right to close the local object also controls speed default 0.8 weight
  occdist_scale: 0.01 # The weighting for how much the controller should attempt to avoid obstacles default 0.01 weight obstacle avoiding weight.

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.25 # [0, 5], The distance the robot must travel before oscillation flags are reset, in meters. How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
  escape_vel: 0.0 # [-2, 2], Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
  escape_reset_dist: 0.5 # [0, 5], The distance the robot must travel before oscillation flags are reset, in meters
  escape_reset_theta: 0.0 # [0, 5], The distance the robot must travel before oscillation flags are reset, in theta

  simple_attractor: false #Set this to true to allow simple attraction to a goal point instead of intelligent cost propagation
  prune_plan: true # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
